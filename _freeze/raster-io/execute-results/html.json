{
  "hash": "e22972b0d883a1a3f52b93d8408848f7",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n# Raster Data I/O\n\n- In R, several libraries are available to work with raster data\n  - `{raster}` by Robert Hijmans. This library is not maintained anymore\n  - `{terra}` by the same author. This library is the successor of `{raster}` and is actively maintained\n  - `{stars}` by Edzer Pebesma. This library extremly well developed, but it tends to be slower than `{terra}` (which is why we will not cover it in this course)\n- Like `{sf}` The library `{terra}` is based on the GDAL library (see @sec-gdal-ogr2ogr)\n- GDAL Supports a *wide* range of raster formats (see [Raster drivers](https://gdal.org/en/latest/drivers/raster/index.html))\n\n\n## Import a raster file\n\n- `terra` uses the function `rast()` to import raster data\n- Printing the object will give you some basic information about the raster\n  - The number of rows and columns, as well as the number of layers\n  - The resolution of the raster, meter per pixel (25 in our case)\n  - The extent of the raster, in the coordinate reference system of the raster\n  - The coordinate reference system (CRS) of the raster\n  - The source (in memory, or a file path)\n  - The name(s) of the band(s) (we only have one band in our case)\n  - The min and max values of the raster\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\n\ndhm25 <- rast(\"data/Spatial_Analysis_II/dhm25_lu.tif\")\ndhm25\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 2321, 2161, 1  (nrow, ncol, nlyr)\nresolution  : 25, 25  (x, y)\nextent      : 2628987, 2683012, 1179988, 1238013  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903+ / LV95 (EPSG:2056) \nsource      : dhm25_lu.tif \nname        : dhm25_lu \nmin value   :    381.1 \nmax value   :   3228.3 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## GeoTIFF\n\n- GeoTIFF is the most common raster format\n- GeoTIFF is an extension to the TIFF format, which includes additional metadata to establish the spatial reference of the file\n- This includes the CRS, the extent, the resolution, and the origin of the raster\n- The metadata is either stored in the header of the file, or in an accompanying file with the same name, but different extension (`.tfw` or `.aux.xml`)\n- Other important raster file formats include:\n  - Cloud optimized GeoTIFF (COG): A GeoTIFF file that is optimized for cloud storage which allows for efficient, partial reading of the file over HTTP\n  - JPG2000 (`.jp2`) is a compressed raster format that is often used for satellite imagery\n  - NetCDF (`.nc`) is a format that is often used for climate data\n  - HDF5 (`.h5`) is a format that is often used for remote sensing data\n\n\n\n## Writing a raster file\n\n\n- You can write a raster object to a file using the `writeRaster()` function\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteRaster(dhm25, \"data-out/dhm25_lu.tif\", overwrite = TRUE)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}