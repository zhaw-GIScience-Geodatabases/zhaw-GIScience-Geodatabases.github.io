{
  "hash": "a0281ea73e25852d421fef45808b8945",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr:\n  opts_chunk: \n    tidy: false\n---\n\n\n\n\n\n\n# Simple Features\n\n## Simple feature standard\n\n- Simple features is an open standard (ISO 19125-1:2004) developed and endorsed by the [Open Geospatial Consortium (OGC)](https://www.ogc.org/)\n- The standard is widely implemented in spatial databases (such as PostGIS), desktop GIS (such as ArcGIS, QGIS), scripting languages (such as R, Python) and forms the vector data basis for libraries such as GDAL. \n\n\n## What is a feature?\n\nThe standard says: \n\n> A simple feature is defined [...] to have both spatial and non-spatial attributes. Spatial attributes are geometry valued, and simple features are based on 2D geometry with linear interpolation between vertices. \n\n- A feature is thought of as a thing / an object in the real world, such as a building or a tree. \n- Features have: \n  1. a geometry describing where on Earth the feature is located\n  2. attributes, which describe other properties. \n- For example:\n  1. The geometry of a tree can be the delineation of its crown, of its stem, or the point indicating its center\n  2. attributes (properties) may include its height, color, diameter at breast height at a particular date, and so on\n\n\n## Simple Feature Model\n\n\n- Simple features is a hierarchical data model that represents a wide range of geometry types. \n- All geometries are composed of points in a 2-, 3- or 4-dimensional space\n- Of 18 geometry types supported by the specification, only the following seven (see @fig-sf and @tbl-sf) are used in the vast majority of geographic research: \n  - Three basic types: points, linestrings, polygons\n  - Three composite types: mutlipoints, multilinestrings, multipolygons\n  - One special case: geometrycollection (which can be a conglomarate of all the afore mentioned)\n- These seven core geometry types are fully supported by the R package sf [@pebesma2018]\n\n\n:::{#fig-sf}\n\n![](images/simple_feature_types.svg)\n\nImage source: @dorman2023\n:::\n\n\n\n\n\n\n::: {#tbl-sf .cell tbl-cap='Source: @pebesma2018'}\n::: {.cell-output-display}\n\n\n|Type                 |Description                                                                 | # of Dimension|\n|:--------------------|:---------------------------------------------------------------------------|--------------:|\n|`POINT`              |zero-dimensional geometry containing a single point                         |              0|\n|`LINESTRING`         |sequence of points connected by straight[^non-selfintersecting] line pieces |              1|\n|`POLYGON`            |sequence of points form a closed[^non-selfintersecting] ring[^holes]        |              2|\n|`MULTIPOINT`         |set of points                                                               |              0|\n|`MULTILINESTRING`    |set of linestrings                                                          |              1|\n|`MULTIPOLYGON`       |set of polygons                                                             |              2|\n|`GEOMETRYCOLLECTION` |set of geometries of any of the above types                                 |             NA|\n\n\n:::\n:::\n\n\n\n\n\n\n\n[^non-selfintersecting]: non-selfintersecting\n[^holes]: the first ring denotes the exterior ring, zero or more subsequent rings denote holes in this exterior ring\n\n## Simple features in R\n\nSimple Features in R is modelled in three levels:\n\n1. Simple feature geometries (`sfg`): Individual Simple Feature objects\n2. Simple Feature geometry columns (`sfc`): A list column of `sfg`s\n3. Simple Features (with attributes): A `sfc` with attributes, i.e. additional columns\n\n## sfg: simple feature geometry \n\n- Simple feature geometries are implemented as R native data, using the following rules:\n  1. a single POINT is a numeric vector\n  2. a set of points, e.g. in a LINESTRING or ring of a POLYGON is a matrix, each row containing a point\n  3. any other set is a `list`\n  \n(however, creator functions are rarely used in practice, since we typically bulk read and write spatial data. They are useful for illustration)\n\n\n### Points \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nfracht <- st_point(c(2685374, 1256519))\n\nfracht\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(fracht)\n```\n\n::: {.cell-output-display}\n![](simple-features_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Linestrings\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- c(\n  2684336, 1255553, \n  2682705, 1258929\n  ) |> \n  matrix(ncol = 2, byrow = TRUE)\n\ncoords\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        [,1]    [,2]\n[1,] 2684336 1255553\n[2,] 2682705 1258929\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npiste <- st_linestring(coords)\n\npiste\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(piste)\n```\n\n::: {.cell-output-display}\n![](simple-features_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n### Polygons\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_2 <- c(\n  2684142, 1255702, # ↰ \n  2685600, 1256958, # start and end must\n  2682534, 1259699, # be identical (closed)\n  2684142, 1255702  # ↲ \n) |> \n  matrix(ncol = 2, byrow = TRUE) |> \n  list()\n\ncoords_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n        [,1]    [,2]\n[1,] 2684142 1255702\n[2,] 2685600 1256958\n[3,] 2682534 1259699\n[4,] 2684142 1255702\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflughafen <- st_polygon(coords_2)\n\nflughafen\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(flughafen)\n```\n\n::: {.cell-output-display}\n![](simple-features_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n## sfc: Simple feature geometry columns\n\n- Usually, a `sfc` contains more than one `sfg`. \n- This is not mandatory, and for convenience we will just use a single `sfg` to showcase `sfc`\n- As you might have noticed, we didn't specify a CRS when creating the `sfg` objects. This is because we weren't able to. With `sfc`, we can ([and should](https://fosstodon.org/@jjimenezshaw@mapstodon.space/113310384205885118)) specify a crs. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfracht_sfc <- st_sfc(fracht, crs = 2056)\n\nfracht_sfc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2685374 ymin: 1256519 xmax: 2685374 ymax: 1256519\nProjected CRS: CH1903+ / LV95\n```\n\n\n:::\n:::\n\n\n\n\n\n<hr class=\"br\">\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npiste_sfc <- st_sfc(piste, crs = 2056)\n\npiste_sfc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 2682705 ymin: 1255553 xmax: 2684336 ymax: 1258929\nProjected CRS: CH1903+ / LV95\n```\n\n\n:::\n:::\n\n\n\n\n\n<hr class=\"br\">\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflughafen_sfc <- st_sfc(flughafen, crs = 2056)\n\nflughafen_sfc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 1 feature \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2682534 ymin: 1255702 xmax: 2685600 ymax: 1259699\nProjected CRS: CH1903+ / LV95\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## sf: Simple features\n\n- Simple features have attributes\n- In order to add attributes to a simple feature column (`sfc`), we need to convert it to a simple feature (`sf`)\n- A `sf` object is a subset of a data.frame. Many (all?) things which can be done with a data.frame, can be done with an `sf` object\n- Many `tidyverse` functions are implemented to nicely work with `sf`\n- **Note**: Geometries are *sticky*. This means they aren't dropped implicitly\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfracht_sf <- st_as_sf(fracht_sfc)\n\nfracht_sf$name <- \"Ost\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# sf objects are also dataframes\nis.data.frame(fracht_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n<hr class=\"br\">\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Geometries are sticky\nfracht_sf[, \"name\"] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2685374 ymin: 1256519 xmax: 2685374 ymax: 1256519\nProjected CRS: CH1903+ / LV95\n  name                       x\n1  Ost POINT (2685374 1256519)\n```\n\n\n:::\n:::\n\n\n\n\n\n\n<hr class=\"br\">\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npiste_sf <- st_as_sf(piste_sfc)\n\npiste_sf$nr <- 34\n\nflughafen_sf <- st_as_sf(flughafen_sfc)\n\nflughafen_sf$name <- \"Flughafen Zürich\"\n\nflughafen_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2682534 ymin: 1255702 xmax: 2685600 ymax: 1259699\nProjected CRS: CH1903+ / LV95\n                               x             name\n1 POLYGON ((2684142 1255702, ... Flughafen Zürich\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Plotting simple features {#sec-plotting}\n\n- Various libraries support plotting `sf` objects:\n  - base R (sf provides a `plot`-method)\n  - General purpose libraries such as `ggplot2`\n  - Dedicated geospatial plotting libraries such as `tmap`\n- Use:\n  - base R: If you want to take a quick look at your data. Base R has the most compact syntax and is extremely fast in plotting\n  - `ggplot2`: If you only have (small-ish) vector data (no raster) and/or want to leverage the power of `ggplot2`\n  - `tmap`: If you want to use all features a dedicated library for geospatial data has to offer: North arrow, scale bar, interactive (web) maps\n\n\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\n#\n# Using base R\nplot(st_geometry(flughafen_sf))\nplot(piste_sf, add = TRUE)\nplot(fracht_sf, add = TRUE)\n```\n\n::: {.cell-output-display}\n![base R](simple-features_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#\n# Using ggplot2\nlibrary(ggplot2)\nggplot() +\n  geom_sf(data = flughafen_sf) +\n  geom_sf(data = piste_sf) +\n  geom_sf(data = fracht_sf)\n```\n\n::: {.cell-output-display}\n![library `ggplot2`](simple-features_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#\n# Using tmap\nlibrary(tmap)\ntm_shape(flughafen_sf) + tm_polygons() +\n  tm_shape(piste_sf) + tm_lines() +\n  tm_shape(fracht_sf) + tm_dots()\n```\n\n::: {.cell-output-display}\n![library `tmap`](simple-features_files/figure-html/unnamed-chunk-17-3.png){width=672}\n:::\n:::\n\n\n\n\n\n<hr class=\"br\">\n\n- The `tmap` library can render the map either in a static plot as above (the default) or as an interactive web map (see below)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set tmap_mode to \"view\" for an interactive web map\ntmap_mode(\"view\")\n\ntm_shape(flughafen_sf) + tm_polygons() +\n  tm_shape(piste_sf) + tm_lines() +\n  tm_shape(fracht_sf) + tm_dots()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-414c602386c8c8765fe8\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-414c602386c8c8765fe8\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"createMapPane\",\"args\":[\"tmap401\",401]},{\"method\":\"createMapPane\",\"args\":[\"tmap402\",402]},{\"method\":\"createMapPane\",\"args\":[\"tmap403\",403]},{\"method\":\"addProviderTiles\",\"args\":[\"Esri.WorldGrayCanvas\",null,\"Esri.WorldGrayCanvas\",{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"OpenStreetMap\",null,\"OpenStreetMap\",{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"Esri.WorldTopoMap\",null,\"Esri.WorldTopoMap\",{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[8.55426024116079,8.573830049741858,8.533682117066119,8.55426024116079],\"lat\":[47.44672832053686,47.45783559902862,47.48287746996957,47.44672832053686]}]]],\"Flughafen.Zürich\",\"flughafen_sf\",{\"interactive\":true,\"className\":\"\",\"pane\":\"tmap401\",\"stroke\":true,\"color\":\"#666666\",\"weight\":1,\"opacity\":1,\"fill\":true,\"fillColor\":\"#D9D9D9\",\"fillOpacity\":1,\"dashArray\":\"none\",\"smoothFactor\":1,\"noClip\":false},\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><b>Flughafen Zürich<\\/b><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Flughafen Zürich<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",null,\"Flughafen Zürich\",{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[8.556803983793177,8.535807808950727],\"lat\":[47.44536350804275,47.47593131959491]}]]],\"X34\",\"piste_sf\",{\"interactive\":true,\"className\":\"\",\"pane\":\"tmap402\",\"stroke\":true,\"color\":\"#000000\",\"weight\":1,\"opacity\":1,\"fill\":false,\"fillColor\":\"#000000\",\"fillOpacity\":0.2,\"dashArray\":\"none\",\"smoothFactor\":1,\"noClip\":false},\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><b>34<\\/b><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>nr<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>34<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",null,\"34\",{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addCircleMarkers\",\"args\":[47.45391700024815,8.570749319133624,2.82842712474619,\"Ost\",\"fracht_sf\",{\"interactive\":true,\"className\":\"\",\"pane\":\"tmap403\",\"stroke\":true,\"color\":\"#666666\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#000000\",\"fillOpacity\":1},null,null,\"<style> div.leaflet-popup-content {width:auto !important;overflow-y:auto; overflow-x:hidden;}<\\/style><div style=\\\"max-height:25em;padding-right:0px;\\\"><table>\\n\\t\\t\\t   <thead><tr><th colspan=\\\"2\\\"><b>Ost<\\/b><\\/th><\\/thead><\\/tr><tr><td style=\\\"color: #888888;\\\"><nobr>name<\\/nobr><\\/td><td align=\\\"right\\\"><nobr>Ost<\\/nobr><\\/td><\\/tr><\\/table><\\/div>\",null,\"Ost\",{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addLayersControl\",\"args\":[[\"Esri.WorldGrayCanvas\",\"OpenStreetMap\",\"Esri.WorldTopoMap\"],[\"flughafen_sf\",\"piste_sf\",\"fracht_sf\"],{\"collapsed\":true,\"autoZIndex\":true,\"position\":\"topleft\"}]}],\"limits\":{\"lat\":[47.44536350804275,47.48287746996957],\"lng\":[8.533682117066119,8.573830049741858]},\"fitBounds\":[47.44672832053686,8.533682117066119,47.48287746996957,8.573830049741858,[]]},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n\n\n## 🪕 Tasks\n\n1. Create some simple feature geometries (`sfg`) of objects you know \"by hand\"\n  - Create at least one `POINT`, one `LINESTRING` and one `POLYGON` geometry\n  - You can capture the coordinates of the nodes from [map.geo.admin](https://map.geo.admin.ch/) if these are is Switzerland and [openstreetmap](https://www.openstreetmap.org) (or similar) if they aren't\n2. Create simple feature columns from you `sfg`s. Make sure that you assign the correct CRS\n3. Create simple features (`sf`) from your `sfc`s and add some attributes\n\n\n\n\n\n",
    "supporting": [
      "simple-features_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n<script src=\"site_libs/leaflet-providers-2.0.0/leaflet-providers_2.0.0.js\"></script>\n<script src=\"site_libs/leaflet-providers-plugin-2.2.2/leaflet-providers-plugin.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}